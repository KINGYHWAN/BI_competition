{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","collapsed_sections":["VQQdWuTZKyha","3_zzJ_yINNBZ","Clw3lJaYMytC","bHUzvNfIaRf7","LJfIZskyPh8Z"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# 개요\n","\n","- LightGBM\n","- XGBoost\n","\n","- test 기간은 23.03.13 ~ 23.03.19 (5분 단위)\n","- train, validation 비율은 cross validation (valid set 비율 조정하면서)"],"metadata":{"id":"VQQdWuTZKyha"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EByPhgkMHo7o","executionInfo":{"status":"ok","timestamp":1690779371394,"user_tz":-540,"elapsed":26221,"user":{"displayName":"정민균","userId":"02008085652330605669"}},"outputId":"a674d2bd-f2e8-4512-94ef-4f9966a2448e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JFCtrbsoKtR0"},"outputs":[],"source":["# 라이브러리 임포팅\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn.datasets import load_iris\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split, cross_val_score\n","import warnings\n","warnings.filterwarnings('ignore')\n","import matplotlib.pyplot as plt\n","\n","import xgboost as xgb\n","from xgboost import XGBRegressor\n","import lightgbm as lgb\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_percentage_error\n","import copy\n","import random"]},{"cell_type":"markdown","source":["\n","# LightGBM GPU 설치 및 테스트"],"metadata":{"id":"3_zzJ_yINNBZ"}},{"cell_type":"code","source":["# %%capture\n","\n","# install LightGBM For GPU\n","!apt-get install -y -qq libboost-all-dev\n","!pip uninstall lightgbm -y\n","!git clone --recursive https://github.com/Microsoft/LightGBM\n","!cd LightGBM && git checkout ca035b2 && mkdir build && cd build &&cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. && make -j$(nproc)\n","!cd LightGBM/python-package/ && python3 setup.py install --precompile\n","!sudo mkdir -p /etc/OpenCL/vendors && echo \"libnvidia-opencl.so.1\" > /etc/OpenCL/vendors/nvidia.icd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B1hL0ka6c3qY","executionInfo":{"status":"ok","timestamp":1688910694161,"user_tz":-540,"elapsed":449676,"user":{"displayName":"정민균","userId":"02008085652330605669"}},"outputId":"5e986b1f-4649-4f97-abcf-159e2e7a7821"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found existing installation: lightgbm 3.3.5\n","Uninstalling lightgbm-3.3.5:\n","  Successfully uninstalled lightgbm-3.3.5\n","Cloning into 'LightGBM'...\n","remote: Enumerating objects: 29547, done.\u001b[K\n","remote: Counting objects: 100% (5186/5186), done.\u001b[K\n","remote: Compressing objects: 100% (384/384), done.\u001b[K\n","remote: Total 29547 (delta 4950), reused 4888 (delta 4798), pack-reused 24361\u001b[K\n","Receiving objects: 100% (29547/29547), 20.77 MiB | 17.60 MiB/s, done.\n","Resolving deltas: 100% (21996/21996), done.\n","Submodule 'include/boost/compute' (https://github.com/boostorg/compute) registered for path 'external_libs/compute'\n","Submodule 'eigen' (https://gitlab.com/libeigen/eigen.git) registered for path 'external_libs/eigen'\n","Submodule 'external_libs/fast_double_parser' (https://github.com/lemire/fast_double_parser.git) registered for path 'external_libs/fast_double_parser'\n","Submodule 'external_libs/fmt' (https://github.com/fmtlib/fmt.git) registered for path 'external_libs/fmt'\n","Cloning into '/content/LightGBM/external_libs/compute'...\n","remote: Enumerating objects: 21733, done.        \n","remote: Counting objects: 100% (5/5), done.        \n","remote: Compressing objects: 100% (4/4), done.        \n","remote: Total 21733 (delta 1), reused 3 (delta 1), pack-reused 21728        \n","Receiving objects: 100% (21733/21733), 8.51 MiB | 14.95 MiB/s, done.\n","Resolving deltas: 100% (17567/17567), done.\n","Cloning into '/content/LightGBM/external_libs/eigen'...\n","remote: Enumerating objects: 119709, done.        \n","remote: Counting objects: 100% (34/34), done.        \n","remote: Compressing objects: 100% (26/26), done.        \n","remote: Total 119709 (delta 8), reused 14 (delta 8), pack-reused 119675        \n","Receiving objects: 100% (119709/119709), 103.00 MiB | 24.03 MiB/s, done.\n","Resolving deltas: 100% (99037/99037), done.\n","Cloning into '/content/LightGBM/external_libs/fast_double_parser'...\n","remote: Enumerating objects: 781, done.        \n","remote: Counting objects: 100% (180/180), done.        \n","remote: Compressing objects: 100% (66/66), done.        \n","remote: Total 781 (delta 124), reused 131 (delta 103), pack-reused 601        \n","Receiving objects: 100% (781/781), 833.45 KiB | 17.01 MiB/s, done.\n","Resolving deltas: 100% (395/395), done.\n","Cloning into '/content/LightGBM/external_libs/fmt'...\n","remote: Enumerating objects: 32524, done.        \n","remote: Counting objects: 100% (3291/3291), done.        \n","remote: Compressing objects: 100% (199/199), done.        \n","remote: Total 32524 (delta 3106), reused 3164 (delta 3064), pack-reused 29233        \n","Receiving objects: 100% (32524/32524), 13.88 MiB | 1.38 MiB/s, done.\n","Resolving deltas: 100% (22065/22065), done.\n","Submodule path 'external_libs/compute': checked out '36350b7de849300bd3d72a05d8bf890ca405a014'\n","Submodule path 'external_libs/eigen': checked out '3147391d946bb4b6c68edd901f2add6ac1f31f8c'\n","Submodule path 'external_libs/fast_double_parser': checked out 'ace60646c02dc54c57f19d644e49a61e7e7758ec'\n","Submodule 'benchmark/dependencies/abseil-cpp' (https://github.com/abseil/abseil-cpp.git) registered for path 'external_libs/fast_double_parser/benchmarks/dependencies/abseil-cpp'\n","Submodule 'benchmark/dependencies/double-conversion' (https://github.com/google/double-conversion.git) registered for path 'external_libs/fast_double_parser/benchmarks/dependencies/double-conversion'\n","Cloning into '/content/LightGBM/external_libs/fast_double_parser/benchmarks/dependencies/abseil-cpp'...\n","remote: Enumerating objects: 22625, done.        \n","remote: Counting objects: 100% (4017/4017), done.        \n","remote: Compressing objects: 100% (1191/1191), done.        \n","remote: Total 22625 (delta 3005), reused 3052 (delta 2825), pack-reused 18608        \n","Receiving objects: 100% (22625/22625), 13.18 MiB | 22.38 MiB/s, done.\n","Resolving deltas: 100% (17821/17821), done.\n","Cloning into '/content/LightGBM/external_libs/fast_double_parser/benchmarks/dependencies/double-conversion'...\n","remote: Enumerating objects: 1387, done.        \n","remote: Counting objects: 100% (231/231), done.        \n","remote: Compressing objects: 100% (124/124), done.        \n","remote: Total 1387 (delta 126), reused 185 (delta 98), pack-reused 1156        \n","Receiving objects: 100% (1387/1387), 7.16 MiB | 16.25 MiB/s, done.\n","Resolving deltas: 100% (898/898), done.\n","Submodule path 'external_libs/fast_double_parser/benchmarks/dependencies/abseil-cpp': checked out 'd936052d32a5b7ca08b0199a6724724aea432309'\n","Submodule path 'external_libs/fast_double_parser/benchmarks/dependencies/double-conversion': checked out 'f4cb2384efa55dee0e6652f8674b05763441ab09'\n","Submodule path 'external_libs/fmt': checked out 'b6f4ceaed0a0a24ccf575fab6c56dd50ccf6f1a9'\n","M\texternal_libs/compute\n","M\texternal_libs/eigen\n","M\texternal_libs/fmt\n","Note: switching to 'ca035b2'.\n","\n","You are in 'detached HEAD' state. You can look around, make experimental\n","changes and commit them, and you can discard any commits you make in this\n","state without impacting any branches by switching back to a branch.\n","\n","If you want to create a new branch to retain commits you create, you may\n","do so (now or later) by using -c with the switch command. Example:\n","\n","  git switch -c <new-branch-name>\n","\n","Or undo this operation with:\n","\n","  git switch -\n","\n","Turn off this advice by setting config variable advice.detachedHead to false\n","\n","HEAD is now at ca035b2e regenerate configure\n","-- The C compiler identification is GNU 9.4.0\n","-- The CXX compiler identification is GNU 9.4.0\n","-- Detecting C compiler ABI info\n","-- Detecting C compiler ABI info - done\n","-- Check for working C compiler: /usr/bin/cc - skipped\n","-- Detecting C compile features\n","-- Detecting C compile features - done\n","-- Detecting CXX compiler ABI info\n","-- Detecting CXX compiler ABI info - done\n","-- Check for working CXX compiler: /usr/bin/c++ - skipped\n","-- Detecting CXX compile features\n","-- Detecting CXX compile features - done\n","-- Found OpenMP_C: -fopenmp (found version \"4.5\") \n","-- Found OpenMP_CXX: -fopenmp (found version \"4.5\") \n","-- Found OpenMP: TRUE (found version \"4.5\")  \n","-- Looking for CL_VERSION_3_0\n","-- Looking for CL_VERSION_3_0 - found\n","-- Found OpenCL: /usr/local/cuda/lib64/libOpenCL.so (found version \"3.0\") \n","-- OpenCL include directory: /usr/local/cuda/include\n","-- Found Boost: /usr/lib/x86_64-linux-gnu/cmake/Boost-1.71.0/BoostConfig.cmake (found suitable version \"1.71.0\", minimum required is \"1.56.0\") found components: filesystem system \n","-- Performing Test MM_PREFETCH\n","-- Performing Test MM_PREFETCH - Success\n","-- Using _mm_prefetch\n","-- Performing Test MM_MALLOC\n","-- Performing Test MM_MALLOC - Success\n","-- Using _mm_malloc\n","-- Configuring done\n","-- Generating done\n","-- Build files have been written to: /content/LightGBM/build\n","[  2%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/main.cpp.o\u001b[0m\n","[  2%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/boosting/boosting.cpp.o\u001b[0m\n","[  4%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/application/application.cpp.o\u001b[0m\n","[  5%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/boosting/boosting.cpp.o\u001b[0m\n","[  7%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/boosting/gbdt.cpp.o\u001b[0m\n","[  8%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/boosting/gbdt_model_text.cpp.o\u001b[0m\n","[ 10%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/boosting/gbdt.cpp.o\u001b[0m\n","[ 11%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/boosting/gbdt_prediction.cpp.o\u001b[0m\n","[ 13%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/boosting/gbdt_model_text.cpp.o\u001b[0m\n","[ 14%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/boosting/prediction_early_stop.cpp.o\u001b[0m\n","[ 15%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/bin.cpp.o\u001b[0m\n","[ 17%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/boosting/gbdt_prediction.cpp.o\u001b[0m\n","[ 18%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/boosting/prediction_early_stop.cpp.o\u001b[0m\n","[ 20%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/bin.cpp.o\u001b[0m\n","[ 21%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/config.cpp.o\u001b[0m\n","[ 23%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/config_auto.cpp.o\u001b[0m\n","[ 24%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/config.cpp.o\u001b[0m\n","[ 26%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/dataset.cpp.o\u001b[0m\n","[ 27%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/config_auto.cpp.o\u001b[0m\n","[ 28%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/dataset.cpp.o\u001b[0m\n","[ 30%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/dataset_loader.cpp.o\u001b[0m\n","[ 31%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/file_io.cpp.o\u001b[0m\n","[ 33%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/dataset_loader.cpp.o\u001b[0m\n","[ 34%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/json11.cpp.o\u001b[0m\n","[ 36%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/metadata.cpp.o\u001b[0m\n","[ 37%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/parser.cpp.o\u001b[0m\n","[ 39%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/file_io.cpp.o\u001b[0m\n","[ 40%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/json11.cpp.o\u001b[0m\n","[ 42%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/train_share_states.cpp.o\u001b[0m\n","[ 43%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/metadata.cpp.o\u001b[0m\n","[ 44%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/io/tree.cpp.o\u001b[0m\n","[ 46%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/parser.cpp.o\u001b[0m\n","[ 47%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/train_share_states.cpp.o\u001b[0m\n","[ 49%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/io/tree.cpp.o\u001b[0m\n","[ 50%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/metric/dcg_calculator.cpp.o\u001b[0m\n","[ 52%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/metric/metric.cpp.o\u001b[0m\n","[ 53%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/metric/dcg_calculator.cpp.o\u001b[0m\n","[ 55%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/metric/metric.cpp.o\u001b[0m\n","[ 56%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/network/ifaddrs_patch.cpp.o\u001b[0m\n","[ 57%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/network/linker_topo.cpp.o\u001b[0m\n","[ 59%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/network/linkers_mpi.cpp.o\u001b[0m\n","[ 60%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/network/linkers_socket.cpp.o\u001b[0m\n","[ 62%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/network/network.cpp.o\u001b[0m\n","[ 63%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/objective/objective_function.cpp.o\u001b[0m\n","[ 65%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/network/ifaddrs_patch.cpp.o\u001b[0m\n","[ 66%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/network/linker_topo.cpp.o\u001b[0m\n","[ 68%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/network/linkers_mpi.cpp.o\u001b[0m\n","[ 69%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/network/linkers_socket.cpp.o\u001b[0m\n","[ 71%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/network/network.cpp.o\u001b[0m\n","[ 72%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/objective/objective_function.cpp.o\u001b[0m\n","[ 73%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/treelearner/cuda_tree_learner.cpp.o\u001b[0m\n","[ 75%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/treelearner/data_parallel_tree_learner.cpp.o\u001b[0m\n","[ 76%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/treelearner/cuda_tree_learner.cpp.o\u001b[0m\n","[ 78%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/treelearner/data_parallel_tree_learner.cpp.o\u001b[0m\n","[ 79%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/treelearner/feature_parallel_tree_learner.cpp.o\u001b[0m\n","[ 81%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/treelearner/feature_parallel_tree_learner.cpp.o\u001b[0m\n","[ 82%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/treelearner/gpu_tree_learner.cpp.o\u001b[0m\n","[ 84%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/treelearner/gpu_tree_learner.cpp.o\u001b[0m\n","[ 85%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/treelearner/linear_tree_learner.cpp.o\u001b[0m\n","[ 86%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/treelearner/linear_tree_learner.cpp.o\u001b[0m\n","[ 88%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/treelearner/serial_tree_learner.cpp.o\u001b[0m\n","[ 89%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/treelearner/serial_tree_learner.cpp.o\u001b[0m\n","[ 91%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/treelearner/tree_learner.cpp.o\u001b[0m\n","[ 92%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/treelearner/tree_learner.cpp.o\u001b[0m\n","[ 94%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/treelearner/voting_parallel_tree_learner.cpp.o\u001b[0m\n","[ 95%] \u001b[32mBuilding CXX object CMakeFiles/lightgbm.dir/src/treelearner/voting_parallel_tree_learner.cpp.o\u001b[0m\n","[ 97%] \u001b[32mBuilding CXX object CMakeFiles/_lightgbm.dir/src/c_api.cpp.o\u001b[0m\n","[ 98%] \u001b[32m\u001b[1mLinking CXX executable /content/LightGBM/lightgbm\u001b[0m\n","[ 98%] Built target lightgbm\n","[100%] \u001b[32m\u001b[1mLinking CXX shared library /content/LightGBM/lib_lightgbm.so\u001b[0m\n","[100%] Built target _lightgbm\n","INFO:root:running install\n","/content/LightGBM/python-package/setup.py:220: SetuptoolsDeprecationWarning: setup.py install is deprecated.\n","!!\n","\n","        ********************************************************************************\n","        Please avoid running ``setup.py`` directly.\n","        Instead, use pypa/build, pypa/installer, pypa/build or\n","        other standards-based tools.\n","\n","        See https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html for details.\n","        ********************************************************************************\n","\n","!!\n","  install.initialize_options(self)\n","INFO:root:running build\n","INFO:root:running build_py\n","INFO:root:creating build\n","INFO:root:creating build/lib\n","INFO:root:creating build/lib/lightgbm\n","INFO:root:copying lightgbm/callback.py -> build/lib/lightgbm\n","INFO:root:copying lightgbm/basic.py -> build/lib/lightgbm\n","INFO:root:copying lightgbm/engine.py -> build/lib/lightgbm\n","INFO:root:copying lightgbm/compat.py -> build/lib/lightgbm\n","INFO:root:copying lightgbm/dask.py -> build/lib/lightgbm\n","INFO:root:copying lightgbm/libpath.py -> build/lib/lightgbm\n","INFO:root:copying lightgbm/__init__.py -> build/lib/lightgbm\n","INFO:root:copying lightgbm/plotting.py -> build/lib/lightgbm\n","INFO:root:copying lightgbm/sklearn.py -> build/lib/lightgbm\n","INFO:root:running egg_info\n","INFO:root:creating lightgbm.egg-info\n","INFO:root:writing lightgbm.egg-info/PKG-INFO\n","INFO:root:writing dependency_links to lightgbm.egg-info/dependency_links.txt\n","INFO:root:writing requirements to lightgbm.egg-info/requires.txt\n","INFO:root:writing top-level names to lightgbm.egg-info/top_level.txt\n","INFO:root:writing manifest file 'lightgbm.egg-info/SOURCES.txt'\n","INFO:root:reading manifest file 'lightgbm.egg-info/SOURCES.txt'\n","INFO:root:reading manifest template 'MANIFEST.in'\n","WARNING:root:no previously-included directories found matching 'build'\n","WARNING:root:warning: no files found matching 'LICENSE'\n","WARNING:root:warning: no files found matching '*.txt'\n","WARNING:root:warning: no files found matching '*.so' under directory 'lightgbm'\n","WARNING:root:warning: no files found matching 'compile/CMakeLists.txt'\n","WARNING:root:warning: no files found matching 'compile/cmake/IntegratedOpenCL.cmake'\n","WARNING:root:warning: no files found matching '*.so' under directory 'compile'\n","WARNING:root:warning: no files found matching '*.dll' under directory 'compile/Release'\n","WARNING:root:warning: no files found matching 'compile/external_libs/compute/CMakeLists.txt'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/compute/cmake'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/compute/include'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/compute/meta'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/CMakeLists.txt'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/Eigen/Cholesky'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/Eigen/Core'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/Eigen/Dense'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/Eigen/Eigenvalues'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/Eigen/Geometry'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/Eigen/Householder'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/Eigen/Jacobi'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/Eigen/LU'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/Eigen/QR'\n","WARNING:root:warning: no files found matching 'compile/external_libs/eigen/Eigen/SVD'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/Cholesky'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/Core'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/Eigenvalues'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/Geometry'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/Householder'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/Jacobi'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/LU'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/misc'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/plugins'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/QR'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/eigen/Eigen/src/SVD'\n","WARNING:root:warning: no files found matching 'compile/external_libs/fast_double_parser/CMakeLists.txt'\n","WARNING:root:warning: no files found matching 'compile/external_libs/fast_double_parser/LICENSE'\n","WARNING:root:warning: no files found matching 'compile/external_libs/fast_double_parser/LICENSE.BSL'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/fast_double_parser/include'\n","WARNING:root:warning: no files found matching 'compile/external_libs/fmt/CMakeLists.txt'\n","WARNING:root:warning: no files found matching 'compile/external_libs/fmt/LICENSE.rst'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/external_libs/fmt/include'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/include'\n","WARNING:root:warning: no files found matching '*' under directory 'compile/src'\n","WARNING:root:warning: no files found matching 'LightGBM.sln' under directory 'compile/windows'\n","WARNING:root:warning: no files found matching 'LightGBM.vcxproj' under directory 'compile/windows'\n","WARNING:root:warning: no files found matching '*.dll' under directory 'compile/windows/x64/DLL'\n","WARNING:root:warning: no previously-included files matching '*.py[co]' found anywhere in distribution\n","WARNING:root:warning: no previously-included files found matching 'compile/external_libs/compute/.git'\n","INFO:root:writing manifest file 'lightgbm.egg-info/SOURCES.txt'\n","INFO:root:copying lightgbm/VERSION.txt -> build/lib/lightgbm\n","INFO:root:running install_lib\n","INFO:root:creating /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:copying build/lib/lightgbm/VERSION.txt -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:copying build/lib/lightgbm/callback.py -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:copying build/lib/lightgbm/basic.py -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:copying build/lib/lightgbm/engine.py -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:copying build/lib/lightgbm/compat.py -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:copying build/lib/lightgbm/dask.py -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:copying build/lib/lightgbm/libpath.py -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:copying build/lib/lightgbm/__init__.py -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:copying build/lib/lightgbm/plotting.py -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:copying build/lib/lightgbm/sklearn.py -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:LightGBM:Installing lib_lightgbm from: ['/content/LightGBM/lib_lightgbm.so']\n","INFO:root:copying /content/LightGBM/lib_lightgbm.so -> /usr/local/lib/python3.10/dist-packages/lightgbm\n","INFO:root:byte-compiling /usr/local/lib/python3.10/dist-packages/lightgbm/callback.py to callback.cpython-310.pyc\n","INFO:root:byte-compiling /usr/local/lib/python3.10/dist-packages/lightgbm/basic.py to basic.cpython-310.pyc\n","INFO:root:byte-compiling /usr/local/lib/python3.10/dist-packages/lightgbm/engine.py to engine.cpython-310.pyc\n","INFO:root:byte-compiling /usr/local/lib/python3.10/dist-packages/lightgbm/compat.py to compat.cpython-310.pyc\n","INFO:root:byte-compiling /usr/local/lib/python3.10/dist-packages/lightgbm/dask.py to dask.cpython-310.pyc\n","INFO:root:byte-compiling /usr/local/lib/python3.10/dist-packages/lightgbm/libpath.py to libpath.cpython-310.pyc\n","INFO:root:byte-compiling /usr/local/lib/python3.10/dist-packages/lightgbm/__init__.py to __init__.cpython-310.pyc\n","INFO:root:byte-compiling /usr/local/lib/python3.10/dist-packages/lightgbm/plotting.py to plotting.cpython-310.pyc\n","INFO:root:byte-compiling /usr/local/lib/python3.10/dist-packages/lightgbm/sklearn.py to sklearn.cpython-310.pyc\n","INFO:root:running install_egg_info\n","INFO:root:Copying lightgbm.egg-info to /usr/local/lib/python3.10/dist-packages/lightgbm-3.3.5-py3.10.egg-info\n","INFO:root:running install_scripts\n"]}]},{"cell_type":"markdown","source":["# 최종 데이터 확인\n","\n","- data_result"],"metadata":{"id":"Clw3lJaYMytC"}},{"cell_type":"code","source":["# float32 실수형으로 데이터 변형하기\n","\n","def Transform_to_float32( data, num ) : # num : 바꿀 x 변수 개수, 태양광발전량부터 현재수요+태양광은 바꾸면 안됨\n","\n","    for i in range( num ) :\n","        col = data.columns[ i ]\n","        data[ col ] = data[ col ].astype( np.float32 )\n","\n","    return data"],"metadata":{"id":"nTQyBam_iBKr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# train 셋 기준에 맞추어 scaling 진행\n","\n","def data_scaling(X_train: pd.DataFrame, X_val: pd.DataFrame, X_test: pd.DataFrame, method: object) -> pd.DataFrame:\n","    \"\"\"\n","\n","    :param X_train: train_data_set\n","    :param X_val: validation_data_set\n","    :param X_test: test_data_set\n","    :param method: method : min-max, standard, log-scale\n","\n","    :return: train_scaled, val_scaled, test_scaled\n","    \"\"\"\n","    # drop_list = ['공휴일', '주말', '평일']\n","    drop_list = ['공휴일', '주말']\n","    # drop_list = []\n","\n","    temp_X_train = X_train[drop_list]\n","    temp_X_val = X_val[drop_list]\n","    temp_X_test = X_test[drop_list]\n","\n","    X_train = X_train.drop(columns=drop_list, axis=1)\n","    X_val = X_val.drop(columns=drop_list, axis=1)\n","    X_test = X_test.drop(columns=drop_list, axis=1)\n","\n","    if method == 'standard':\n","\n","        from sklearn.preprocessing import StandardScaler\n","\n","        std = StandardScaler()\n","        std.fit(X_train)\n","\n","        X_train_scaled = std.transform(X_train)\n","        X_val_scaled = std.transform(X_val)\n","        X_test_scaled = std.transform(X_test)\n","\n","        X_train_scaled_df = pd.DataFrame(index=X_train.index, data=X_train_scaled, columns=X_train.columns)\n","        X_train_scaled_df = pd.concat([X_train_scaled_df, temp_X_train], axis=1)\n","\n","        X_val_scaled_df = pd.DataFrame(index=X_val.index, data=X_val_scaled, columns=X_train.columns)\n","        X_val_scaled_df = pd.concat([X_val_scaled_df, temp_X_val], axis=1)\n","\n","        X_test_scaled_df = pd.DataFrame(index=X_test.index, data=X_test_scaled, columns=X_train.columns)\n","        X_test_scaled_df = pd.concat([X_test_scaled_df, temp_X_test], axis=1)\n","\n","        return X_train_scaled_df, X_val_scaled_df, X_test_scaled_df\n","\n","    elif method == 'min-max':\n","\n","        from sklearn.preprocessing import MinMaxScaler\n","\n","        min_max = MinMaxScaler()\n","        min_max.fit(X_train)\n","\n","        X_train_scaled = min_max.transform(X_train)\n","        X_val_scaled = min_max.transform(X_val)\n","        X_test_scaled = min_max.transform(X_test)\n","\n","        X_train_scaled_df = pd.DataFrame(index=X_train.index, data=X_train_scaled, columns=X_train.columns)\n","        X_train_scaled_df = pd.concat([X_train_scaled_df, temp_X_train], axis=1)\n","\n","        X_val_scaled_df = pd.DataFrame(index=X_val.index, data=X_val_scaled, columns=X_train.columns)\n","        X_val_scaled_df = pd.concat([X_val_scaled_df, temp_X_val], axis=1)\n","\n","        X_test_scaled_df = pd.DataFrame(index=X_test.index, data=X_test_scaled, columns=X_train.columns)\n","        X_test_scaled_df = pd.concat([X_test_scaled_df, temp_X_test], axis=1)\n","\n","        return X_train_scaled_df, X_val_scaled_df, X_test_scaled_df"],"metadata":{"id":"vmrJmXawhDPH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 데이터 업로드 (colab에서 수행), # 사용할 데이터 경로 설정\n","\n","# data_selected 는 PCA 및 변수선택을 진행한 데이터 셋\n","# dataset은 수집한 전체 데이터 정보를 담는 데이터 셋\n","# DAE는 목표변수에 DAE를 적용한 목표변수를 담은 데이터 셋\n","\n","# 변수 선택 데이터, 비 선택 데이터를 선택함에 따라 주석변겅 (data_result로 저장)\n","data_sec=pd.read_csv('/content/drive/MyDrive/2023 겨울학기 + 여름학기/B.I Contest/데이터/최종 데이터/최종/dataset.csv', index_col=0)\n","\n","data_result=pd.read_csv('/content/drive/MyDrive/2023 겨울학기 + 여름학기/B.I Contest/데이터/최종 데이터/최종/data_selected.csv', index_col=0)\n","# data_result=pd.read_csv('dataset의 경로 설정', index_col=0)\n","DAE=pd.read_csv('/content/drive/MyDrive/2023 겨울학기 + 여름학기/B.I Contest/데이터/최종 데이터/DAE 결과/DAE_result.csv', index_col=0)"],"metadata":{"id":"OgQFQGinMw7U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# DAE의 목표 변수 기존 데이터 셋에 추가하기\n","\n","DAE.set_index(data_result.index, inplace=True)\n","data_result['DAE'] = DAE['DAE']"],"metadata":{"id":"SVpNQ0egbQBH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_result"],"metadata":{"id":"fE20zePugBrs","executionInfo":{"status":"ok","timestamp":1690705986892,"user_tz":-540,"elapsed":305,"user":{"displayName":"정민균","userId":"02008085652330605669"}},"colab":{"base_uri":"https://localhost:8080/","height":869},"outputId":"74cc533b-16e2-4812-a123-39b0ed218fa7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          기온  강수량       습도   PC_일조일사      적설       환율  \\\n","2013-01-01 00:00:00  -8.0748  0.0  75.2775 -0.296834  0.1576  1063.64   \n","2013-01-01 00:05:00  -8.0859  0.0  75.3719 -0.296834  0.1615  1063.64   \n","2013-01-01 00:10:00  -8.0972  0.0  75.4624 -0.296834  0.1615  1063.64   \n","2013-01-01 00:15:00  -8.1068  0.0  75.5569 -0.296834  0.1615  1063.64   \n","2013-01-01 00:20:00  -8.1176  0.0  75.6525 -0.296834  0.1615  1063.64   \n","...                      ...  ...      ...       ...     ...      ...   \n","2023-03-30 23:35:00  10.2794  0.0  49.9997 -0.296834  0.0000  1296.55   \n","2023-03-30 23:40:00  10.2100  0.0  50.1872 -0.296834  0.0000  1296.55   \n","2023-03-30 23:45:00  10.1441  0.0  50.3786 -0.296834  0.0000  1296.55   \n","2023-03-30 23:50:00  10.0753  0.0  50.5654 -0.296834  0.0000  1296.55   \n","2023-03-30 23:55:00  10.0092  0.0  50.7568 -0.296834  0.0000  1296.55   \n","\n","                     PC_GDP전기차  공휴일   주말  태양광 발전량(MWh)  현재수요(MW)    현재수요+태양광  \\\n","2013-01-01 00:00:00  -0.302265  1.0  0.0        0.0000  61601.19  61601.1900   \n","2013-01-01 00:05:00  -0.302275  1.0  0.0        0.0000  61250.49  61250.4900   \n","2013-01-01 00:10:00  -0.302285  1.0  0.0        0.0000  60927.36  60927.3600   \n","2013-01-01 00:15:00  -0.302295  1.0  0.0        0.0000  60562.58  60562.5800   \n","2013-01-01 00:20:00  -0.302306  1.0  0.0        0.0000  60521.87  60521.8700   \n","...                        ...  ...  ...           ...       ...         ...   \n","2023-03-30 23:35:00   0.877100  0.0  0.0        0.1799  62439.54  62439.7199   \n","2023-03-30 23:40:00   0.877121  0.0  0.0        0.1799  62162.58  62162.7599   \n","2023-03-30 23:45:00   0.877141  0.0  0.0        0.1799  61694.35  61694.5299   \n","2023-03-30 23:50:00   0.877162  0.0  0.0        0.1799  61152.42  61152.5999   \n","2023-03-30 23:55:00   0.877182  0.0  0.0        0.1799  60859.17  60859.3499   \n","\n","                              DAE  \n","2013-01-01 00:00:00  60625.648255  \n","2013-01-01 00:05:00  60968.921085  \n","2013-01-01 00:10:00  60521.634494  \n","2013-01-01 00:15:00  60218.808827  \n","2013-01-01 00:20:00  59939.644193  \n","...                           ...  \n","2023-03-30 23:35:00  62655.158883  \n","2023-03-30 23:40:00  62567.921099  \n","2023-03-30 23:45:00  62102.103418  \n","2023-03-30 23:50:00  61665.396592  \n","2023-03-30 23:55:00  62343.283465  \n","\n","[1077408 rows x 13 columns]"],"text/html":["\n","\n","  <div id=\"df-f60e4bbb-45aa-4888-ae9b-17073fb87f8d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>기온</th>\n","      <th>강수량</th>\n","      <th>습도</th>\n","      <th>PC_일조일사</th>\n","      <th>적설</th>\n","      <th>환율</th>\n","      <th>PC_GDP전기차</th>\n","      <th>공휴일</th>\n","      <th>주말</th>\n","      <th>태양광 발전량(MWh)</th>\n","      <th>현재수요(MW)</th>\n","      <th>현재수요+태양광</th>\n","      <th>DAE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2013-01-01 00:00:00</th>\n","      <td>-8.0748</td>\n","      <td>0.0</td>\n","      <td>75.2775</td>\n","      <td>-0.296834</td>\n","      <td>0.1576</td>\n","      <td>1063.64</td>\n","      <td>-0.302265</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>61601.19</td>\n","      <td>61601.1900</td>\n","      <td>60625.648255</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-01 00:05:00</th>\n","      <td>-8.0859</td>\n","      <td>0.0</td>\n","      <td>75.3719</td>\n","      <td>-0.296834</td>\n","      <td>0.1615</td>\n","      <td>1063.64</td>\n","      <td>-0.302275</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>61250.49</td>\n","      <td>61250.4900</td>\n","      <td>60968.921085</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-01 00:10:00</th>\n","      <td>-8.0972</td>\n","      <td>0.0</td>\n","      <td>75.4624</td>\n","      <td>-0.296834</td>\n","      <td>0.1615</td>\n","      <td>1063.64</td>\n","      <td>-0.302285</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>60927.36</td>\n","      <td>60927.3600</td>\n","      <td>60521.634494</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-01 00:15:00</th>\n","      <td>-8.1068</td>\n","      <td>0.0</td>\n","      <td>75.5569</td>\n","      <td>-0.296834</td>\n","      <td>0.1615</td>\n","      <td>1063.64</td>\n","      <td>-0.302295</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>60562.58</td>\n","      <td>60562.5800</td>\n","      <td>60218.808827</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-01 00:20:00</th>\n","      <td>-8.1176</td>\n","      <td>0.0</td>\n","      <td>75.6525</td>\n","      <td>-0.296834</td>\n","      <td>0.1615</td>\n","      <td>1063.64</td>\n","      <td>-0.302306</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>60521.87</td>\n","      <td>60521.8700</td>\n","      <td>59939.644193</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 23:35:00</th>\n","      <td>10.2794</td>\n","      <td>0.0</td>\n","      <td>49.9997</td>\n","      <td>-0.296834</td>\n","      <td>0.0000</td>\n","      <td>1296.55</td>\n","      <td>0.877100</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.1799</td>\n","      <td>62439.54</td>\n","      <td>62439.7199</td>\n","      <td>62655.158883</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 23:40:00</th>\n","      <td>10.2100</td>\n","      <td>0.0</td>\n","      <td>50.1872</td>\n","      <td>-0.296834</td>\n","      <td>0.0000</td>\n","      <td>1296.55</td>\n","      <td>0.877121</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.1799</td>\n","      <td>62162.58</td>\n","      <td>62162.7599</td>\n","      <td>62567.921099</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 23:45:00</th>\n","      <td>10.1441</td>\n","      <td>0.0</td>\n","      <td>50.3786</td>\n","      <td>-0.296834</td>\n","      <td>0.0000</td>\n","      <td>1296.55</td>\n","      <td>0.877141</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.1799</td>\n","      <td>61694.35</td>\n","      <td>61694.5299</td>\n","      <td>62102.103418</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 23:50:00</th>\n","      <td>10.0753</td>\n","      <td>0.0</td>\n","      <td>50.5654</td>\n","      <td>-0.296834</td>\n","      <td>0.0000</td>\n","      <td>1296.55</td>\n","      <td>0.877162</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.1799</td>\n","      <td>61152.42</td>\n","      <td>61152.5999</td>\n","      <td>61665.396592</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 23:55:00</th>\n","      <td>10.0092</td>\n","      <td>0.0</td>\n","      <td>50.7568</td>\n","      <td>-0.296834</td>\n","      <td>0.0000</td>\n","      <td>1296.55</td>\n","      <td>0.877182</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.1799</td>\n","      <td>60859.17</td>\n","      <td>60859.3499</td>\n","      <td>62343.283465</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1077408 rows × 13 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f60e4bbb-45aa-4888-ae9b-17073fb87f8d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-4b48b1f4-d6a7-41d0-8997-5acb1dd26d6a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4b48b1f4-d6a7-41d0-8997-5acb1dd26d6a')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-4b48b1f4-d6a7-41d0-8997-5acb1dd26d6a button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f60e4bbb-45aa-4888-ae9b-17073fb87f8d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f60e4bbb-45aa-4888-ae9b-17073fb87f8d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# 데이터 목표변수 제외 입력변수의 자료형 변경\n","\n","or_data=Transform_to_float32(data_result, 9)"],"metadata":{"id":"iTEFbZBWkPAt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 목표 변수에 shift 진행 (6시간 만큼)\n","\n","or_data['현재수요+태양광']=or_data['현재수요+태양광'].shift(72)\n","\n","process1=or_data.loc[ '2013-01-01 06:00:00' : '2023-03-12 17:55:00' ] # train\n","process3=or_data.loc[ '2022-03-12 18:00:00' : '2023-03-12 17:55:00' ] # valid\n","process2=or_data.loc[ '2023-03-12 18:00:00' : '2023-03-19 17:55:00' ] # test"],"metadata":{"id":"0WkqoLEXRrvv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 어떤 data 셋을 선택하느냐에 따라 test 등 주석 변경 필요함\n","\n","# test 셋 설정\n","X_test=process2[['기온', '강수량', '습도', 'PC_일조일사', '환율', 'PC_GDP전기차', '공휴일', '주말']]\n","y_test=process2['현재수요+태양광']\n","\n","# MAPE 계산 및 복원, 비복원에 사용할 변수 설정\n","y_real_test=process2['현재수요(MW)']      # MAPE 계산시 적용\n","y_for_sub = process2['태양광 발전량(MWh)'] # y 비복원시 적용할 y\n","\n","# X_test=process2[['기온', '강수량', '습도', '일조', '일사', '환율', 'GDP', '공휴일', '주말', '평일','electric']]\n","# y_test=process2['DAE']\n","\n","# X_test=process2[['기온', '습도', '일사', '환율', 'GDP', 'electric']]\n","# y_test=process2['현재수요+태양광']"],"metadata":{"id":"S0aMu8VWmJ9y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["wtf_DAE=or_data.loc['2023-03-13 00:00:00' : '2023-03-16 23:55:00']"],"metadata":{"id":"XuiCqORX71-S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["wtf_DAE[['현재수요+태양광','DAE']]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":2255},"id":"8HDluXTv7kW_","executionInfo":{"status":"ok","timestamp":1690706921065,"user_tz":-540,"elapsed":5,"user":{"displayName":"정민균","userId":"02008085652330605669"}},"outputId":"b579c3bf-c3f8-438e-eb31-f1a03903ef84"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                       현재수요+태양광           DAE\n","2023-03-13 00:00:00  59545.2846  59015.169763\n","2023-03-13 00:05:00  59796.5746  59897.958126\n","2023-03-13 00:10:00  60066.6946  58706.645477\n","2023-03-13 00:15:00  60143.6446  58133.708314\n","2023-03-13 00:20:00  60275.1946  58155.455138\n","...                         ...           ...\n","2023-03-16 23:35:00  70572.9009  65742.877855\n","2023-03-16 23:40:00  70890.1009  65838.132972\n","2023-03-16 23:45:00  71059.4709  65451.774385\n","2023-03-16 23:50:00  71061.0609  65437.328969\n","2023-03-16 23:55:00  71008.3509  64770.876569\n","\n","[1152 rows x 2 columns]"],"text/html":["\n","\n","  <div id=\"df-841bbdea-93bb-436b-9706-72d761e8d2b0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>현재수요+태양광</th>\n","      <th>DAE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2023-03-13 00:00:00</th>\n","      <td>59545.2846</td>\n","      <td>59015.169763</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-13 00:05:00</th>\n","      <td>59796.5746</td>\n","      <td>59897.958126</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-13 00:10:00</th>\n","      <td>60066.6946</td>\n","      <td>58706.645477</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-13 00:15:00</th>\n","      <td>60143.6446</td>\n","      <td>58133.708314</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-13 00:20:00</th>\n","      <td>60275.1946</td>\n","      <td>58155.455138</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-16 23:35:00</th>\n","      <td>70572.9009</td>\n","      <td>65742.877855</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-16 23:40:00</th>\n","      <td>70890.1009</td>\n","      <td>65838.132972</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-16 23:45:00</th>\n","      <td>71059.4709</td>\n","      <td>65451.774385</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-16 23:50:00</th>\n","      <td>71061.0609</td>\n","      <td>65437.328969</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-16 23:55:00</th>\n","      <td>71008.3509</td>\n","      <td>64770.876569</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1152 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-841bbdea-93bb-436b-9706-72d761e8d2b0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-cfafc34c-cf6f-438c-848e-4ebe5e086d36\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cfafc34c-cf6f-438c-848e-4ebe5e086d36')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-cfafc34c-cf6f-438c-848e-4ebe5e086d36 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-841bbdea-93bb-436b-9706-72d761e8d2b0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-841bbdea-93bb-436b-9706-72d761e8d2b0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["# lightGBM 적용 with Cross Validation"],"metadata":{"id":"bHUzvNfIaRf7"}},{"cell_type":"code","source":["def lightgbmcv(nums ,num_leaves, learning_rate, num_iterations,  min_data_in_leaf, max_depth):\n","  # 시드 고정\n","  random.seed(42)\n","\n","  # 이후 결과값 저장할 것들\n","  output_result=pd.Series()\n","\n","  # cross validation적용, valid-sets 비율 : 1/nums\n","  total_rows = len(process1)\n","  section_size = total_rows // nums\n","  sections = []\n","  start_row = 0\n","  for _ in range(nums):\n","      end_row = start_row + section_size\n","      if end_row > total_rows:\n","          end_row = total_rows\n","      section = process1.iloc[start_row:end_row]\n","      sections.append(section)\n","      start_row = end_row\n","\n","  # nums 횟수의 시행 당, 측정되는 mape 저장 리스트\n","  mape_list=[]\n","\n","  # cross validation을 위해서 nums 만큼 수행\n","  for _ in range(nums):\n","    dflist=copy.deepcopy(sections)\n","    val=dflist[_]\n","    dflist.pop(_)\n","    train=pd.concat(dflist, axis=0)\n","\n","    # cross validation에 따라서 X_train, X_val, y_train, y_val 설정\n","    X_train=train[['기온', '강수량', '습도', 'PC_일조일사', '환율', 'PC_GDP전기차', '공휴일', '주말']]\n","    y_train=train['DAE']\n","    X_val=val[['기온', '강수량', '습도', 'PC_일조일사', '환율', 'PC_GDP전기차', '공휴일', '주말']]\n","    y_val=val['DAE']\n","\n","    # X_train 기준으로 X_val, X_test scaling 진행\n","    X_train_scaled, X_val_scaled, X_test_scaled = data_scaling(X_train, X_val, X_test, 'min-max')\n","\n","    # lightgbm 모델 학습 이전 Dataset 설정\n","    lgb_train = lgb.Dataset(X_train_scaled, y_train)\n","    lgb_val = lgb.Dataset(X_val_scaled, y_val, reference=lgb_train)\n","    watchlist = [lgb_train, lgb_val]\n","\n","    # 입력에 따른 파라미터 설정\n","    params = {\n","        'learning_rate': learning_rate,\n","        'max_depth': max_depth,\n","        'boosting_type': 'gbdt',\n","        'objective':'regression',\n","        'metric':'mae',\n","        'is_training_metric':True,\n","        'num_leaves': num_leaves,\n","        'num_iterations' : num_iterations,\n","        'min_data_in_leaf' :  min_data_in_leaf,\n","    }\n","\n","    # LightGBm 설정 파라미터에 따른 학습 진행\n","    gbm = lgb.train(params, lgb_train, num_boost_round=100,\n","                    valid_sets=watchlist, early_stopping_rounds=10, verbose_eval=10)\n","    # 예측값 진행\n","    output_pred = gbm.predict(X_test_scaled, num_iteration=gbm.best_iteration)\n","\n","    # 복원한 전력수요 비복원 진행\n","    output = output_pred - y_for_sub.values\n","    mape_1 = mean_absolute_percentage_error(y_real_test, output)\n","    mape_list.append(mape_1)\n","\n","    output_result += output\n","\n","  # 목표지표 mape 계산 (cross validation 평균)\n","  mape = sum(mape_list)/len(mape_list)\n","\n","  return nums, num_leaves, learning_rate, num_iterations, max_depth, min_data_in_leaf, mape, output_result, y_real_test"],"metadata":{"id":"J50JiINaVGah"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# lightgbmcv(cv횟수, \b잎 개수,  학습률, 트리개수)\n","lightgbm_result=[]\n","for cv in [4,5]:\n","  for learning_rate in [0.1, 0.5, 1]:\n","    for num_iterations in [50, 100, 150]:\n","      for num_leaves in [100, 200, 300]:\n","        for max_depth in [5, 8, 10]:\n","          for min_data_in_leaf in [10, 30, 50]:\n","            testing=[lightgbmcv(cv, num_leaves, learning_rate, num_iterations)]\n","            lightgbm_result.append(testing)\n","\n","lgb_result = pd.DataFrame([tuple(lst[0]) for lst in lightgbm_result])\n","lgb_result.columns=['nums_of_cv', 'num_leaves','learning_rate','num_iterations','max_deth', 'min_data_in_leaf', 'mape']"],"metadata":{"id":"oFV2JFM6WVfC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 데이터프레임으로 파라미터와 결과 저장해놓았음\n","\n","lgb_result"],"metadata":{"id":"qyndTXAhON_q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 제일 값 좋았던 값을 변수에 저장\n","\n","nums, num_leaves, learning_rate, num_iterations, max_depth, min_data_in_leaf, mape, output_result, y_real_test = lightgbmcv(4, 100, 0.1, 100, 30, 5)"],"metadata":{"id":"_qyA76bhxexm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# lightGBM 결과 plot 찍기\n","\n","plt.plot(y_real_test, color='red', label='y_real')\n","plt.plot(output_result, color='blue', label='y_pred_lightGBM')\n","plt.xlabel('Date')\n","plt.ylabel('Power Demand')\n","plt.legend()\n","plt.title('LightGBM')\n","plt.ylim(30000, 90000)\n","plt.xticks(np.arange(0, 2016, 288), rotation=45, fontsize=6)\n","plt.show()"],"metadata":{"id":"QHju5jEYQnyT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# XGboost 적용 with Cross Validation"],"metadata":{"id":"LJfIZskyPh8Z"}},{"cell_type":"code","source":["# 중간에 꼬여서 XGBoost는 plot도 한번에 찍도록했음,\n","\n","def xgboostcv(nums, n_estimators, min_child_weight, learning_rate, max_depth, gamma):\n","  random.seed(42)\n","  total_rows = len(process1)\n","  section_size = total_rows // nums\n","\n","  sections = []\n","  start_row = 0\n","\n","  for _ in range(nums):\n","      end_row = start_row + section_size\n","      if end_row > total_rows:\n","          end_row = total_rows\n","      section = process1.iloc[start_row:end_row]\n","      sections.append(section)\n","      start_row = end_row\n","  rmse_list=[]\n","  mape_list=[]\n","\n","  for _ in range(nums):\n","    dflist=copy.deepcopy(sections)\n","    val=dflist[_]\n","    dflist.pop(_)\n","    train=pd.concat(dflist, axis=0)\n","\n","    # X_train=train[['기온', '강수량', '습도', 'PC_일조일사', '환율', '공휴일', '주말']]\n","    # y_train=train['현재수요+태양광']\n","\n","    # X_val=val[['기온', '강수량', '습도', 'PC_일조일사', '환율', '공휴일', '주말']]\n","    # y_val=val['현재수요+태양광']\n","\n","    # X_train=train[['기온','습도', 'PC_일조일사', '환율',]]\n","    # y_train=train['현재수요+태양광']\n","\n","    # X_val=val[['기온','습도', 'PC_일조일사', '환율',]]\n","    # y_val=val['현재수요+태양광']\n","\n","    X_train=train[['기온', '강수량', '습도', 'PC_일조일사', '환율', 'PC_GDP전기차', '공휴일', '주말']]\n","    y_train=train['DAE']\n","\n","    X_val=val[['기온', '강수량', '습도', 'PC_일조일사', '환율', 'PC_GDP전기차', '공휴일', '주말']]\n","    y_val=val['DAE']\n","\n","    # X_train=train[['기온', '습도', '일사', '환율', 'GDP', 'electric']]\n","    # y_train=train['현재수요+태양광']\n","\n","    # X_val=val[['기온', '습도', '일사', '환율', 'GDP', 'electric']]\n","    # y_val=val['현재수요+태양광']\n","\n","    X_train_scaled, X_val_scaled, X_test_scaled = data_scaling(X_train, X_val, X_test, 'min-max')\n","\n","    xg_train = xgb.DMatrix(X_train_scaled, label=y_train)\n","    xg_val = xgb.DMatrix(X_val_scaled, label=y_val)\n","    xg_test = xgb.DMatrix(X_test_scaled, label=y_test)\n","\n","    watchlist = [(xg_train, 'train'), (xg_val, 'test')]\n","\n","    params = {'eta' : learning_rate,\n","              'objective' : 'reg:linear',\n","              'eval_metric' : 'mae',\n","              'n_estimators' : n_estimators,\n","              'max_depth' : max_depth,\n","              'gamma' : gamma,\n","              'min_child_weight' : min_child_weight,\n","              'tree_method' : 'gpu_hist',\n","              }\n","\n","    bst = xgb.train(params = params, dtrain=xg_train, num_boost_round=100, evals=watchlist, early_stopping_rounds=10, verbose_eval=10)\n","\n","    output_pred = bst.predict(xg_test)\n","\n","    output = output_pred - y_for_sub.values\n","    rmse_1 = mean_squared_error(y_real_test, output) ** 0.5\n","    mape_1 = mean_absolute_percentage_error(y_real_test, output)\n","\n","    rmse_list.append(rmse_1)\n","    mape_list.append(mape_1)\n","\n","  rmse = sum(rmse_list)/len(mape_list)\n","  mape = sum(mape_list)/len(mape_list)\n","\n","  plt.plot(y_real_test, color='red', label='y_real')\n","  plt.plot(output, color='blue', label='y_pred_xgboost')\n","  plt.xlabel('Date')\n","  plt.ylabel('Power Demand')\n","  plt.legend()\n","  plt.title('XGBoost')\n","  plt.ylim(30000, 90000)\n","  plt.xticks(np.arange(0, 2016, 288), rotation=45, fontsize=6)\n","  plt.show()\n","\n","  print('The MAPE of prediction1 is:', mape_1)\n","  return nums, n_estimators, min_child_weight, learning_rate, max_depth, gamma, mape"],"metadata":{"id":"Oh-25U5IGzfH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# xgboostcv(cv횟수, \b잎의 분기 가중치,  학습률, 트리개수):\n","xgboost_result=[]\n","for cv in [4,5]:\n","  for learning_rate in [0.1, 0.5, 1]:\n","    for num_iterations in [100]:\n","      for min_child_weight in [1, 3, 5]:\n","        testing=[xgboostcv(cv, min_child_weight, learning_rate, num_iterations)]\n","        xgboost_result.append(testing)\n","\n","xgb_result = pd.DataFrame([tuple(lst[0]) for lst in xgboost_result])\n","xgb_result.columns=['nums_of_cv', 'min_child_weight','learning_rate','num_iterations','mape']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RnRJ9DLPI_Zd","executionInfo":{"status":"ok","timestamp":1688804004003,"user_tz":-540,"elapsed":68659,"user":{"displayName":"정민균","userId":"02008085652330605669"}},"outputId":"1d335a25-c38b-4ae8-a097-dd52ab0459fb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[08:12:15] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:15] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56966.96595\ttest-mae:53084.15223\n","[10]\ttrain-mae:19864.86783\ttest-mae:16423.85675\n","[20]\ttrain-mae:7188.65231\ttest-mae:4346.12955\n","[30]\ttrain-mae:3770.62501\ttest-mae:2884.67172\n","[37]\ttrain-mae:3196.56116\ttest-mae:3257.18089\n","[08:12:16] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:16] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56114.47213\ttest-mae:55921.44766\n","[10]\ttrain-mae:19567.56689\ttest-mae:19458.78966\n","[20]\ttrain-mae:7070.70925\ttest-mae:6974.73374\n","[30]\ttrain-mae:3717.08308\ttest-mae:3801.79876\n","[40]\ttrain-mae:3037.12984\ttest-mae:3268.09472\n","[50]\ttrain-mae:2849.78995\ttest-mae:3189.58910\n","[60]\ttrain-mae:2766.75171\ttest-mae:3197.44594\n","[62]\ttrain-mae:2756.24695\ttest-mae:3194.60128\n","[08:12:18] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:18] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55853.37251\ttest-mae:56703.68369\n","[10]\ttrain-mae:19476.54845\ttest-mae:19797.16518\n","[20]\ttrain-mae:7039.28157\ttest-mae:6985.03957\n","[30]\ttrain-mae:3677.56035\ttest-mae:3803.76758\n","[40]\ttrain-mae:2997.28407\ttest-mae:3310.41758\n","[50]\ttrain-mae:2814.44149\ttest-mae:3276.93959\n","[60]\ttrain-mae:2738.87192\ttest-mae:3285.49912\n","[65]\ttrain-mae:2708.26440\ttest-mae:3302.88140\n","[08:12:19] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:19] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55351.40103\ttest-mae:58302.48749\n","[10]\ttrain-mae:19301.49440\ttest-mae:20932.72987\n","[20]\ttrain-mae:6872.32298\ttest-mae:8635.06275\n","[30]\ttrain-mae:3405.97743\ttest-mae:5764.90566\n","[40]\ttrain-mae:2691.98648\ttest-mae:5151.11014\n","[50]\ttrain-mae:2512.14771\ttest-mae:4973.61948\n","[60]\ttrain-mae:2432.14038\ttest-mae:4929.55565\n","[70]\ttrain-mae:2382.72747\ttest-mae:4920.28657\n","[75]\ttrain-mae:2362.34102\ttest-mae:4929.03644\n","[08:12:20] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:20] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56966.96595\ttest-mae:53084.15223\n","[10]\ttrain-mae:19864.86783\ttest-mae:16423.85675\n","[20]\ttrain-mae:7188.65231\ttest-mae:4346.12955\n","[30]\ttrain-mae:3770.62809\ttest-mae:2884.66572\n","[37]\ttrain-mae:3196.56463\ttest-mae:3257.17532\n","[08:12:21] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:21] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56114.47213\ttest-mae:55921.44766\n","[10]\ttrain-mae:19567.56689\ttest-mae:19458.78966\n","[20]\ttrain-mae:7070.71167\ttest-mae:6974.67454\n","[30]\ttrain-mae:3717.10432\ttest-mae:3801.18275\n","[40]\ttrain-mae:3037.13188\ttest-mae:3267.49926\n","[50]\ttrain-mae:2845.46243\ttest-mae:3182.99353\n","[60]\ttrain-mae:2758.98795\ttest-mae:3167.36914\n","[70]\ttrain-mae:2693.25469\ttest-mae:3152.28958\n","[79]\ttrain-mae:2653.64814\ttest-mae:3151.17526\n","[08:12:22] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:22] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55853.37251\ttest-mae:56703.68369\n","[10]\ttrain-mae:19476.54845\ttest-mae:19797.16518\n","[20]\ttrain-mae:7039.28157\ttest-mae:6985.03957\n","[30]\ttrain-mae:3677.56035\ttest-mae:3803.76758\n","[40]\ttrain-mae:2997.28507\ttest-mae:3310.41758\n","[50]\ttrain-mae:2814.44184\ttest-mae:3276.93980\n","[60]\ttrain-mae:2738.87147\ttest-mae:3285.49985\n","[64]\ttrain-mae:2714.21802\ttest-mae:3292.07079\n","[08:12:23] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:23] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55351.40103\ttest-mae:58302.48749\n","[10]\ttrain-mae:19301.49440\ttest-mae:20932.72987\n","[20]\ttrain-mae:6872.32298\ttest-mae:8635.06275\n","[30]\ttrain-mae:3405.97743\ttest-mae:5764.90566\n","[40]\ttrain-mae:2691.98648\ttest-mae:5151.11014\n","[50]\ttrain-mae:2512.15267\ttest-mae:4973.66966\n","[60]\ttrain-mae:2432.15467\ttest-mae:4929.60526\n","[70]\ttrain-mae:2382.74463\ttest-mae:4920.33433\n","[74]\ttrain-mae:2365.48327\ttest-mae:4928.33477\n","[08:12:24] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:24] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56966.96595\ttest-mae:53084.15223\n","[10]\ttrain-mae:19864.86783\ttest-mae:16423.85675\n","[20]\ttrain-mae:7188.65231\ttest-mae:4346.12955\n","[30]\ttrain-mae:3770.62776\ttest-mae:2884.66572\n","[38]\ttrain-mae:3157.25092\ttest-mae:3323.65023\n","[08:12:25] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:25] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56114.47213\ttest-mae:55921.44766\n","[10]\ttrain-mae:19567.56689\ttest-mae:19458.78966\n","[20]\ttrain-mae:7070.71167\ttest-mae:6974.67454\n","[30]\ttrain-mae:3717.10432\ttest-mae:3801.18275\n","[40]\ttrain-mae:3037.13284\ttest-mae:3267.49926\n","[50]\ttrain-mae:2845.44500\ttest-mae:3182.99553\n","[60]\ttrain-mae:2758.96361\ttest-mae:3167.38186\n","[70]\ttrain-mae:2699.16628\ttest-mae:3138.35931\n","[79]\ttrain-mae:2659.05663\ttest-mae:3141.31014\n","[08:12:26] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:26] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55853.37251\ttest-mae:56703.68369\n","[10]\ttrain-mae:19476.54845\ttest-mae:19797.16518\n","[20]\ttrain-mae:7039.28157\ttest-mae:6985.03957\n","[30]\ttrain-mae:3677.56035\ttest-mae:3803.76758\n","[40]\ttrain-mae:2997.28507\ttest-mae:3310.41758\n","[50]\ttrain-mae:2814.44929\ttest-mae:3276.93964\n","[60]\ttrain-mae:2738.88061\ttest-mae:3285.50055\n","[65]\ttrain-mae:2708.27733\ttest-mae:3302.88296\n","[08:12:27] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:27] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55351.40103\ttest-mae:58302.48749\n","[10]\ttrain-mae:19301.49440\ttest-mae:20932.72987\n","[20]\ttrain-mae:6872.32298\ttest-mae:8635.06275\n","[30]\ttrain-mae:3405.97850\ttest-mae:5764.91838\n","[40]\ttrain-mae:2691.98725\ttest-mae:5151.12810\n","[50]\ttrain-mae:2512.15297\ttest-mae:4973.68962\n","[60]\ttrain-mae:2432.16288\ttest-mae:4929.34917\n","[70]\ttrain-mae:2382.75243\ttest-mae:4920.07939\n","[74]\ttrain-mae:2365.49209\ttest-mae:4928.08197\n","[08:12:28] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:28] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31650.43837\ttest-mae:28154.51858\n","[10]\ttrain-mae:2862.91463\ttest-mae:4079.61270\n","[12]\ttrain-mae:2820.37765\ttest-mae:4147.28330\n","[08:12:28] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:28] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31176.71703\ttest-mae:30974.74168\n","[10]\ttrain-mae:2846.27184\ttest-mae:3400.03274\n","[20]\ttrain-mae:2616.28782\ttest-mae:3509.39756\n","[21]\ttrain-mae:2596.77111\ttest-mae:3500.05869\n","[08:12:29] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:29] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31031.65688\ttest-mae:31404.60190\n","[10]\ttrain-mae:2823.21883\ttest-mae:3349.38116\n","[17]\ttrain-mae:2653.56188\ttest-mae:3390.46907\n","[08:12:30] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:30] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:30752.81989\ttest-mae:32705.56724\n","[10]\ttrain-mae:2512.25313\ttest-mae:5026.47338\n","[20]\ttrain-mae:2326.43941\ttest-mae:5340.24053\n","[08:12:31] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:31] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31650.43837\ttest-mae:28154.51858\n","[10]\ttrain-mae:2862.91463\ttest-mae:4079.61270\n","[13]\ttrain-mae:2794.98691\ttest-mae:4144.24904\n","[08:12:32] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:32] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31176.71703\ttest-mae:30974.74168\n","[10]\ttrain-mae:2846.28344\ttest-mae:3400.03919\n","[20]\ttrain-mae:2616.31853\ttest-mae:3508.86780\n","[21]\ttrain-mae:2596.80257\ttest-mae:3499.52882\n","[08:12:33] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:33] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31031.65688\ttest-mae:31404.60190\n","[10]\ttrain-mae:2823.22759\ttest-mae:3349.38085\n","[17]\ttrain-mae:2653.56852\ttest-mae:3390.46932\n","[08:12:34] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:34] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:30752.81989\ttest-mae:32705.56724\n","[10]\ttrain-mae:2512.25537\ttest-mae:5026.47540\n","[19]\ttrain-mae:2335.06579\ttest-mae:5313.77023\n","[08:12:35] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:35] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31650.43837\ttest-mae:28154.51858\n","[10]\ttrain-mae:2862.92637\ttest-mae:4079.61256\n","[13]\ttrain-mae:2795.00037\ttest-mae:4144.24850\n","[08:12:36] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:36] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31176.71703\ttest-mae:30974.74168\n","[10]\ttrain-mae:2846.36092\ttest-mae:3400.03111\n","[20]\ttrain-mae:2617.31626\ttest-mae:3399.12932\n","[21]\ttrain-mae:2601.25931\ttest-mae:3404.37235\n","[08:12:36] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:36] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31031.65688\ttest-mae:31404.60190\n","[10]\ttrain-mae:2823.26267\ttest-mae:3349.37945\n","[18]\ttrain-mae:2640.74415\ttest-mae:3387.16208\n","[08:12:37] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:37] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:30752.81989\ttest-mae:32705.56724\n","[10]\ttrain-mae:2512.26959\ttest-mae:5026.47540\n","[20]\ttrain-mae:2326.45908\ttest-mae:5341.21609\n","[08:12:38] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:38] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3736.27125\ttest-mae:3978.23416\n","[9]\ttrain-mae:2926.68409\ttest-mae:6728.11448\n","[08:12:38] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:38] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3726.26819\ttest-mae:3831.08993\n","[10]\ttrain-mae:2797.33815\ttest-mae:3878.78175\n","[11]\ttrain-mae:2769.44740\ttest-mae:3881.24304\n","[08:12:39] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:39] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3625.10185\ttest-mae:3822.17726\n","[10]\ttrain-mae:2820.27071\ttest-mae:3758.72569\n","[08:12:39] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:39] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3340.52694\ttest-mae:4853.78949\n","[10]\ttrain-mae:2489.46439\ttest-mae:6338.63932\n","[08:12:40] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:40] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3736.27125\ttest-mae:3978.23416\n","[10]\ttrain-mae:2899.60607\ttest-mae:6736.18832\n","[08:12:41] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:41] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3726.26819\ttest-mae:3831.08993\n","[10]\ttrain-mae:2797.36320\ttest-mae:3878.78323\n","[11]\ttrain-mae:2769.50292\ttest-mae:3881.24517\n","[08:12:41] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:41] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3625.10185\ttest-mae:3822.17726\n","[10]\ttrain-mae:2820.37580\ttest-mae:3758.72448\n","[08:12:42] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:42] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3340.52694\ttest-mae:4853.78949\n","[10]\ttrain-mae:2489.48014\ttest-mae:6338.64603\n","[08:12:43] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:43] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3736.27125\ttest-mae:3978.23416\n","[10]\ttrain-mae:2899.63043\ttest-mae:6736.18832\n","[08:12:43] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:43] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3726.26819\ttest-mae:3831.08993\n","[10]\ttrain-mae:2797.36690\ttest-mae:3878.77189\n","[11]\ttrain-mae:2769.50720\ttest-mae:3881.23413\n","[08:12:44] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:44] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3625.10185\ttest-mae:3822.17726\n","[10]\ttrain-mae:2820.92888\ttest-mae:3766.29181\n","[11]\ttrain-mae:2802.71404\ttest-mae:3765.45419\n","[08:12:45] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:45] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3340.52694\ttest-mae:4853.78949\n","[10]\ttrain-mae:2489.51600\ttest-mae:6338.64603\n","[08:12:46] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:46] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56752.61909\ttest-mae:53073.92283\n","[10]\ttrain-mae:19790.01367\ttest-mae:16851.52527\n","[20]\ttrain-mae:7153.50218\ttest-mae:5195.84420\n","[30]\ttrain-mae:3757.69723\ttest-mae:2837.24051\n","[40]\ttrain-mae:3072.73318\ttest-mae:2773.07635\n","[44]\ttrain-mae:2978.84844\ttest-mae:2806.00836\n","[08:12:48] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:48] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56398.21686\ttest-mae:54720.20729\n","[10]\ttrain-mae:19666.41987\ttest-mae:18780.71660\n","[20]\ttrain-mae:7112.95563\ttest-mae:6480.92142\n","[30]\ttrain-mae:3730.35971\ttest-mae:3853.38667\n","[40]\ttrain-mae:3039.33605\ttest-mae:3502.95547\n","[49]\ttrain-mae:2869.59256\ttest-mae:3504.55479\n","[08:12:49] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:49] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55697.89350\ttest-mae:57680.30524\n","[10]\ttrain-mae:19422.21014\ttest-mae:21002.32366\n","[20]\ttrain-mae:7008.63691\ttest-mae:8312.45989\n","[30]\ttrain-mae:3667.86169\ttest-mae:4493.46211\n","[40]\ttrain-mae:2993.53049\ttest-mae:3608.66177\n","[50]\ttrain-mae:2815.39925\ttest-mae:3320.88723\n","[60]\ttrain-mae:2740.79521\ttest-mae:3278.76486\n","[70]\ttrain-mae:2690.30558\ttest-mae:3261.22798\n","[80]\ttrain-mae:2644.44128\ttest-mae:3292.00559\n","[85]\ttrain-mae:2622.42674\ttest-mae:3326.98987\n","[08:12:50] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:50] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56013.40487\ttest-mae:56203.12306\n","[10]\ttrain-mae:19532.27336\ttest-mae:18998.84992\n","[20]\ttrain-mae:7056.49597\ttest-mae:6265.69342\n","[30]\ttrain-mae:3681.64728\ttest-mae:3498.14132\n","[40]\ttrain-mae:2996.35674\ttest-mae:3301.31261\n","[46]\ttrain-mae:2867.92712\ttest-mae:3337.17451\n","[08:12:51] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:51] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55495.44498\ttest-mae:58461.84804\n","[10]\ttrain-mae:19351.60419\ttest-mae:21035.60926\n","[20]\ttrain-mae:6889.98427\ttest-mae:8953.82366\n","[30]\ttrain-mae:3435.71804\ttest-mae:6132.58118\n","[40]\ttrain-mae:2733.69487\ttest-mae:5633.61774\n","[50]\ttrain-mae:2556.98597\ttest-mae:5632.38432\n","[56]\ttrain-mae:2512.96782\ttest-mae:5634.50547\n","[08:12:52] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:52] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56752.61909\ttest-mae:53073.92283\n","[10]\ttrain-mae:19790.01367\ttest-mae:16851.52527\n","[20]\ttrain-mae:7153.50218\ttest-mae:5195.84420\n","[30]\ttrain-mae:3757.69723\ttest-mae:2837.24051\n","[40]\ttrain-mae:3072.73539\ttest-mae:2773.07080\n","[44]\ttrain-mae:2978.85073\ttest-mae:2806.00252\n","[08:12:52] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:52] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56398.21686\ttest-mae:54720.20729\n","[10]\ttrain-mae:19666.41987\ttest-mae:18780.71660\n","[20]\ttrain-mae:7112.95563\ttest-mae:6480.92142\n","[30]\ttrain-mae:3730.36100\ttest-mae:3853.38667\n","[40]\ttrain-mae:3039.34064\ttest-mae:3502.95385\n","[48]\ttrain-mae:2884.00299\ttest-mae:3499.64698\n","[08:12:53] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:53] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55697.89350\ttest-mae:57680.30524\n","[10]\ttrain-mae:19422.21014\ttest-mae:21002.32366\n","[20]\ttrain-mae:7008.63691\ttest-mae:8312.45989\n","[30]\ttrain-mae:3667.86169\ttest-mae:4493.46211\n","[40]\ttrain-mae:2993.53038\ttest-mae:3608.66177\n","[50]\ttrain-mae:2815.35244\ttest-mae:3320.88292\n","[60]\ttrain-mae:2738.70476\ttest-mae:3273.51419\n","[70]\ttrain-mae:2682.28786\ttest-mae:3276.10651\n","[73]\ttrain-mae:2663.74344\ttest-mae:3303.38058\n","[08:12:54] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:54] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56013.40487\ttest-mae:56203.12306\n","[10]\ttrain-mae:19532.27336\ttest-mae:18998.84992\n","[20]\ttrain-mae:7056.49597\ttest-mae:6265.69342\n","[30]\ttrain-mae:3681.65032\ttest-mae:3498.14132\n","[40]\ttrain-mae:2996.36406\ttest-mae:3301.27011\n","[46]\ttrain-mae:2867.93712\ttest-mae:3337.12977\n","[08:12:55] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:55] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55495.44498\ttest-mae:58461.84804\n","[10]\ttrain-mae:19351.60419\ttest-mae:21035.60926\n","[20]\ttrain-mae:6889.98427\ttest-mae:8953.82366\n","[30]\ttrain-mae:3435.71804\ttest-mae:6132.58118\n","[40]\ttrain-mae:2733.69762\ttest-mae:5633.26318\n","[50]\ttrain-mae:2556.98863\ttest-mae:5631.99258\n","[56]\ttrain-mae:2512.97041\ttest-mae:5634.09084\n","[08:12:56] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:56] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56752.61909\ttest-mae:53073.92283\n","[10]\ttrain-mae:19790.01367\ttest-mae:16851.52527\n","[20]\ttrain-mae:7153.50209\ttest-mae:5195.84420\n","[30]\ttrain-mae:3757.69713\ttest-mae:2837.24051\n","[40]\ttrain-mae:3072.73505\ttest-mae:2773.07080\n","[43]\ttrain-mae:2996.19866\ttest-mae:2799.47004\n","[08:12:57] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:57] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56398.21686\ttest-mae:54720.20729\n","[10]\ttrain-mae:19666.41987\ttest-mae:18780.71660\n","[20]\ttrain-mae:7112.95563\ttest-mae:6480.92142\n","[30]\ttrain-mae:3730.36100\ttest-mae:3853.38667\n","[40]\ttrain-mae:3039.34392\ttest-mae:3502.92347\n","[49]\ttrain-mae:2869.67007\ttest-mae:3504.51807\n","[08:12:58] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:58] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55697.89350\ttest-mae:57680.30524\n","[10]\ttrain-mae:19422.21014\ttest-mae:21002.32366\n","[20]\ttrain-mae:7008.63691\ttest-mae:8312.45989\n","[30]\ttrain-mae:3667.86835\ttest-mae:4493.46204\n","[40]\ttrain-mae:2993.43286\ttest-mae:3608.17004\n","[50]\ttrain-mae:2814.45353\ttest-mae:3308.91461\n","[60]\ttrain-mae:2735.40874\ttest-mae:3255.76996\n","[70]\ttrain-mae:2668.43458\ttest-mae:3289.46386\n","[74]\ttrain-mae:2652.13091\ttest-mae:3283.69068\n","[08:12:59] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:12:59] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:56013.40487\ttest-mae:56203.12306\n","[10]\ttrain-mae:19532.27336\ttest-mae:18998.84992\n","[20]\ttrain-mae:7056.49597\ttest-mae:6265.69342\n","[30]\ttrain-mae:3681.65408\ttest-mae:3498.36340\n","[40]\ttrain-mae:2996.39221\ttest-mae:3301.53309\n","[46]\ttrain-mae:2867.96146\ttest-mae:3337.39426\n","[08:13:00] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:00] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:55495.44498\ttest-mae:58461.84804\n","[10]\ttrain-mae:19351.60419\ttest-mae:21035.60926\n","[20]\ttrain-mae:6889.98398\ttest-mae:8953.84576\n","[30]\ttrain-mae:3435.71992\ttest-mae:6132.60379\n","[40]\ttrain-mae:2733.70645\ttest-mae:5633.31563\n","[50]\ttrain-mae:2556.99768\ttest-mae:5632.03854\n","[57]\ttrain-mae:2501.23581\ttest-mae:5634.72872\n","[08:13:01] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:01] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31531.27911\ttest-mae:28272.59170\n","[10]\ttrain-mae:2868.02351\ttest-mae:3276.26576\n","[13]\ttrain-mae:2797.02670\ttest-mae:3362.87454\n","[08:13:03] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:03] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31334.07787\ttest-mae:30204.77350\n","[10]\ttrain-mae:2879.34275\ttest-mae:3823.13217\n","[13]\ttrain-mae:2806.84033\ttest-mae:4081.24797\n","[08:13:03] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:03] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:30945.09142\ttest-mae:32554.74445\n","[10]\ttrain-mae:2834.53946\ttest-mae:3475.67010\n","[17]\ttrain-mae:2676.10327\ttest-mae:3458.34258\n","[08:13:04] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:04] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31120.45074\ttest-mae:30777.62600\n","[10]\ttrain-mae:2807.08743\ttest-mae:3615.17252\n","[14]\ttrain-mae:2712.39188\ttest-mae:3781.99334\n","[08:13:05] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:05] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:30832.71229\ttest-mae:32863.00655\n","[10]\ttrain-mae:2561.44480\ttest-mae:6119.10612\n","[15]\ttrain-mae:2429.49346\ttest-mae:6524.71363\n","[08:13:05] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:05] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31531.27911\ttest-mae:28272.59170\n","[10]\ttrain-mae:2868.02351\ttest-mae:3276.26576\n","[14]\ttrain-mae:2772.63185\ttest-mae:3345.11163\n","[08:13:06] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:06] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31334.07787\ttest-mae:30204.77350\n","[10]\ttrain-mae:2879.34800\ttest-mae:3823.13218\n","[14]\ttrain-mae:2792.25359\ttest-mae:4083.23461\n","[08:13:07] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:07] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:30945.09142\ttest-mae:32554.74445\n","[10]\ttrain-mae:2834.55655\ttest-mae:3475.66161\n","[17]\ttrain-mae:2676.11864\ttest-mae:3458.33496\n","[08:13:07] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:07] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31120.45074\ttest-mae:30777.62600\n","[10]\ttrain-mae:2807.10296\ttest-mae:3615.18349\n","[14]\ttrain-mae:2712.40211\ttest-mae:3781.99997\n","[08:13:08] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:08] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:30832.71229\ttest-mae:32863.00655\n","[10]\ttrain-mae:2561.45192\ttest-mae:6119.10583\n","[14]\ttrain-mae:2462.59580\ttest-mae:6616.84522\n","[08:13:09] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:09] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31531.27911\ttest-mae:28272.59170\n","[10]\ttrain-mae:2868.04283\ttest-mae:3277.11526\n","[13]\ttrain-mae:2797.07525\ttest-mae:3363.72650\n","[08:13:09] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:09] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31334.07787\ttest-mae:30204.77350\n","[10]\ttrain-mae:2879.38758\ttest-mae:3823.13211\n","[13]\ttrain-mae:2806.88456\ttest-mae:4081.24589\n","[08:13:10] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:10] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:30945.09142\ttest-mae:32554.74445\n","[10]\ttrain-mae:2834.58718\ttest-mae:3475.66220\n","[17]\ttrain-mae:2676.19278\ttest-mae:3458.33547\n","[08:13:11] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:11] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:31120.45074\ttest-mae:30777.62600\n","[10]\ttrain-mae:2807.11597\ttest-mae:3615.22051\n","[14]\ttrain-mae:2710.41162\ttest-mae:3767.64888\n","[08:13:11] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:11] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:30832.71229\ttest-mae:32863.00655\n","[10]\ttrain-mae:2561.45192\ttest-mae:6119.10583\n","[15]\ttrain-mae:2429.51571\ttest-mae:6531.98165\n","[08:13:12] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:12] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3717.04003\ttest-mae:3865.59551\n","[10]\ttrain-mae:2868.30725\ttest-mae:3656.07702\n","[08:13:13] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:13] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3752.30071\ttest-mae:3707.45205\n","[10]\ttrain-mae:2833.28799\ttest-mae:6055.41741\n","[12]\ttrain-mae:2784.14357\ttest-mae:6015.40018\n","[08:13:14] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:14] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3677.29219\ttest-mae:3923.86744\n","[10]\ttrain-mae:2735.92388\ttest-mae:3701.96740\n","[15]\ttrain-mae:2646.20991\ttest-mae:3703.11031\n","[08:13:15] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:15] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3612.75848\ttest-mae:3876.24061\n","[10]\ttrain-mae:2773.83895\ttest-mae:4994.33761\n","[11]\ttrain-mae:2741.62194\ttest-mae:5065.42362\n","[08:13:16] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:16] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3366.30133\ttest-mae:4918.29105\n","[10]\ttrain-mae:2520.00770\ttest-mae:7663.59233\n","[08:13:17] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:17] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3717.04003\ttest-mae:3865.59551\n","[10]\ttrain-mae:2868.31771\ttest-mae:3656.06823\n","[08:13:18] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:18] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3752.30071\ttest-mae:3707.45205\n","[10]\ttrain-mae:2833.29454\ttest-mae:6055.41708\n","[12]\ttrain-mae:2784.15239\ttest-mae:6015.40055\n","[08:13:18] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:18] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3677.29219\ttest-mae:3923.86744\n","[10]\ttrain-mae:2744.46074\ttest-mae:4090.88631\n","[14]\ttrain-mae:2641.50463\ttest-mae:4119.27916\n","[08:13:19] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:19] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3612.75848\ttest-mae:3876.24061\n","[10]\ttrain-mae:2773.83895\ttest-mae:4994.33761\n","[08:13:20] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:20] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3366.30133\ttest-mae:4918.29105\n","[10]\ttrain-mae:2520.00473\ttest-mae:7666.88172\n","[08:13:20] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:20] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3717.04003\ttest-mae:3865.59551\n","[10]\ttrain-mae:2868.23788\ttest-mae:3656.05561\n","[08:13:21] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:21] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3752.30071\ttest-mae:3707.45205\n","[10]\ttrain-mae:2833.30096\ttest-mae:6055.41741\n","[11]\ttrain-mae:2805.63585\ttest-mae:6038.10488\n","[08:13:22] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:22] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3677.29219\ttest-mae:3923.86744\n","[10]\ttrain-mae:2744.48247\ttest-mae:4090.85981\n","[14]\ttrain-mae:2641.52760\ttest-mae:4120.45150\n","[08:13:22] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:22] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3612.75848\ttest-mae:3876.24061\n","[10]\ttrain-mae:2773.83895\ttest-mae:4994.33761\n","[11]\ttrain-mae:2741.62194\ttest-mae:5065.42362\n","[08:13:23] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[08:13:23] WARNING: ../src/learner.cc:767: \n","Parameters: { \"max_bins\", \"num_iterations\" } are not used.\n","\n","[0]\ttrain-mae:3366.30133\ttest-mae:4918.29105\n","[10]\ttrain-mae:2519.99354\ttest-mae:7665.35496\n"]}]},{"cell_type":"code","source":["# 데이터프레임으로 XGBoost 결과 값들 저장\n","\n","xgb_result"],"metadata":{"id":"lz5bDSBe7UAo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 저장했던 값 중 가장 좋은 결과인 녀석으로 plot 찍기\n","\n","xgboostcv(4, 100, 3, 0.1, 6, 0.1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"E6L2JlPlxYwe","executionInfo":{"status":"ok","timestamp":1688912904480,"user_tz":-540,"elapsed":4760,"user":{"displayName":"정민균","userId":"02008085652330605669"}},"outputId":"6a0df295-a2c0-40ec-e336-9fbd346fb6ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[14:28:19] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[14:28:19] WARNING: ../src/learner.cc:767: \n","Parameters: { \"n_estimators\" } are not used.\n","\n","[0]\ttrain-mae:56966.96595\ttest-mae:53084.15223\n","[10]\ttrain-mae:19864.86783\ttest-mae:16423.85675\n","[20]\ttrain-mae:7188.65231\ttest-mae:4346.12955\n","[30]\ttrain-mae:3770.62809\ttest-mae:2884.66572\n","[38]\ttrain-mae:3157.24646\ttest-mae:3323.65023\n","[14:28:20] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[14:28:20] WARNING: ../src/learner.cc:767: \n","Parameters: { \"n_estimators\" } are not used.\n","\n","[0]\ttrain-mae:56114.47213\ttest-mae:55921.44766\n","[10]\ttrain-mae:19567.56689\ttest-mae:19458.78966\n","[20]\ttrain-mae:7070.71167\ttest-mae:6974.67454\n","[30]\ttrain-mae:3717.10432\ttest-mae:3801.18275\n","[40]\ttrain-mae:3037.13188\ttest-mae:3267.49926\n","[50]\ttrain-mae:2845.46243\ttest-mae:3182.99353\n","[60]\ttrain-mae:2758.98795\ttest-mae:3167.36914\n","[70]\ttrain-mae:2693.25469\ttest-mae:3152.28958\n","[79]\ttrain-mae:2653.64814\ttest-mae:3151.17526\n","[14:28:21] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[14:28:21] WARNING: ../src/learner.cc:767: \n","Parameters: { \"n_estimators\" } are not used.\n","\n","[0]\ttrain-mae:55853.37251\ttest-mae:56703.68369\n","[10]\ttrain-mae:19476.54845\ttest-mae:19797.16518\n","[20]\ttrain-mae:7039.28157\ttest-mae:6985.03957\n","[30]\ttrain-mae:3677.56035\ttest-mae:3803.76758\n","[40]\ttrain-mae:2997.28507\ttest-mae:3310.41758\n","[50]\ttrain-mae:2814.44184\ttest-mae:3276.93980\n","[60]\ttrain-mae:2738.87147\ttest-mae:3285.49985\n","[65]\ttrain-mae:2708.26389\ttest-mae:3302.88207\n","[14:28:22] WARNING: ../src/objective/regression_obj.cu:213: reg:linear is now deprecated in favor of reg:squarederror.\n","[14:28:22] WARNING: ../src/learner.cc:767: \n","Parameters: { \"n_estimators\" } are not used.\n","\n","[0]\ttrain-mae:55351.40103\ttest-mae:58302.48749\n","[10]\ttrain-mae:19301.49440\ttest-mae:20932.72987\n","[20]\ttrain-mae:6872.32298\ttest-mae:8635.06275\n","[30]\ttrain-mae:3405.97743\ttest-mae:5764.90566\n","[40]\ttrain-mae:2691.98648\ttest-mae:5151.11014\n","[50]\ttrain-mae:2512.15267\ttest-mae:4973.66966\n","[60]\ttrain-mae:2432.15467\ttest-mae:4929.60526\n","[70]\ttrain-mae:2382.74463\ttest-mae:4920.33433\n","[75]\ttrain-mae:2362.35877\ttest-mae:4929.09693\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["The MAPE of prediction1 is: 0.08462237023478932\n"]},{"output_type":"execute_result","data":{"text/plain":["(4, 100, 3, 0.1, 6, 0.1, 0.10226272949651996)"]},"metadata":{},"execution_count":42}]}]}